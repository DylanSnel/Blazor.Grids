@page "/events"
<SourceCodeLink Repository="Blazor.Grids" Page="@(nameof(Events))" />
In this demo, events are recorded on move and resize of elements.

<Grid>
    <Columns Count="2" />
    <Element style="height: 100%; border: 1px solid black">
        <Dashboard RowGap="1em" ColumnGap="1em" OnMove="Moved" OnResize="Resized" ColumnCount="4" ElementStyle="border: 1px dashed black">
            <TitleSettings HeadingLevel="4" Alignment="Alignment.Left" />
            <Element @bind-Column="@hello_element_def.Column" @bind-Row="@hello_element_def.Row" @bind-ColumnSpan="@hello_element_def.ColumnSpan" @bind-RowSpan="@hello_element_def.RowSpan" Title="@hello_element_def.Title" OnMove="HelloMoved" OnResize="HelloResized" @ref="hello_element">
                <div>
                    <ul>
                        @foreach (var e in HelloEvents)
                        {
                            <li @key="@e.index">@e.Action this element to @e.a, @e.b</li>
                        }
                    </ul>
                </div>
            </Element>
            @foreach (var el in elements)
            {
                <Element @key="@el" @bind-Column="@el.Column" @bind-Row="@el.Row" @bind-ColumnSpan="@el.ColumnSpan" @bind-RowSpan="@el.RowSpan" Title="@el.Title"></Element>
            }
        </Dashboard>
    </Element>
    <Element Column="1" style="border: none">
        <ul>
            @foreach (var e in GridEvents)
            {
                <li @key="@e.index">@e.Action @e.ElementTitle to @e.a, @e.b</li>
            }
        </ul>
    </Element>
</Grid>

@code {
    private class ElementDefinition
    {
        public string Title { get; set; }
        public int Row { get; set; }
        public int Column { get; set; }
        public int RowSpan { get; set; } = 1;
        public int ColumnSpan { get; set; } = 1;
    }
    private ElementDefinition hello_element_def = new ElementDefinition
    {
        Title = "Hello"
    };
    private List<ElementDefinition> elements = new List<ElementDefinition>
{
        new ElementDefinition { Title = "Other", Row = 1, ColumnSpan = 2 },
        new ElementDefinition { Title = "world", Column = 1 }
    };
    private List<(string Action, int a, int b, int index)> HelloEvents = new List<(string Action, int a, int b, int index)>();
    private List<(string Action, string ElementTitle, int a, int b, int index)> GridEvents = new List<(string Action, string ElementTitle, int a, int b, int index)>();
    private Element hello_element;
    private void Moved(ElementMoveArgs args)
    {
        GridEvents.Add(("moved", args.Element.Title, args.NewRow, args.NewColumn, GridEvents.Count));
    }
    private void Resized(ElementResizeArgs args)
    {
        GridEvents.Add(("resized", args.Element.Title, args.NewRowSpan, args.NewColumnSpan, GridEvents.Count));
    }
    private void HelloMoved(ElementMoveArgs args)
    {
        HelloEvents.Add(("moved", args.NewRow, args.NewColumn, HelloEvents.Count));
    }
    private void HelloResized(ElementResizeArgs args)
    {
        HelloEvents.Add(("resized", args.NewRowSpan, args.NewColumnSpan, HelloEvents.Count));
    }
}